import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from qa_assistant import RAGAssistant
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class TelegramRAGBot:
    def __init__(self):
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        if not self.bot_token:
            raise ValueError("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        
        self.bot = Bot(token=self.bot_token)
        self.dp = Dispatcher()
        self.rag_assistant = None
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.dp.message(Command("start"))(self.start_command)
        self.dp.message(Command("help"))(self.help_command)
        # self.dp.message(Command("reindex"))(self.reindex_command)
        self.dp.message()(self.handle_message)
    
    async def initialize_assistant(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...")
        self.rag_assistant = RAGAssistant(
            docs_folder="parsed_pages",
            vector_db_path="vector_db"
        )
        print("‚úÖ RAG –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤")
    
    async def start_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        await message.answer(
            "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø RAG-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –æ–±—É—á–µ–Ω–Ω—ã–π –Ω–∞ –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.\n\n"
            "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
        )
    
    async def help_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
            "/reindex - –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n\n"
            "üí° –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç–µ, –∏ —è –ø–æ–∏—â—É –æ—Ç–≤–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö!"
        )
        await message.answer(help_text)
    
    async def handle_message(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏"""
        # # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        # if message.text.startswith('/'):
        #     return
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        await message.bot.send_chat_action(message.chat.id, "typing")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
            if not self.rag_assistant:
                await self.initialize_assistant()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç RAG —Å–∏—Å—Ç–µ–º—ã
            response = self.rag_assistant.ask(message.text)
            
            if "error" in response:
                await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {response['error']}")
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            answer_text = "üí° –û—Ç–≤–µ—Ç:" + f"\n{response['answer']}"
            sources_text = ""
            
            # if response["sources"]:
            #     sources_text = hitalic("\n\nüîç –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:") + "\n"
            #     for i, source in enumerate(response["sources"], 1):
            #         source_name = source["source"]
            #         content_preview = source["content"]
            #         sources_text += f"{i}. {hbold(source_name)}\n{content_preview}\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            full_response = f"{answer_text}{sources_text}"
            await message.answer(full_response)
            
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        await self.dp.start_polling(self.bot)

if __name__ == "__main__":
    # –î–ª—è Windows
    # if os.name == 'nt':
    #     asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    
    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    bot = TelegramRAGBot()
    
    try:
        asyncio.run(bot.start())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")