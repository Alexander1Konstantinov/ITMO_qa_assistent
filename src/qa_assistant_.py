import os
from langchain.agents import Tool, AgentExecutor, create_react_agent
from langchain.prompts import PromptTemplate
from langchain.memory import ConversationBufferMemory
from langchain_community.vectorstores import FAISS
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_mistralai import ChatMistralAI
from dotenv import load_dotenv

load_dotenv(".env")

class AdmissionConsultant:
    def __init__(self):
        self.vector_db = self._setup_vector_db()
        self.llm = ChatMistralAI(
            model="mistral-medium",
            temperature=0.2,
            api_key=os.getenv("MISTRAL_KEY")
        )
        self.agent = self._setup_agent()

    def _setup_vector_db(self):
        embeddings = HuggingFaceEmbeddings(
            model_name="sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2"
        )
        return FAISS.load_local("vector_db", embeddings, allow_dangerous_deserialization=True)

    def _setup_tools(self):
        def program_search(query: str) -> str:
            docs = self.vector_db.similarity_search(query, k=2)
            return "\n".join([f"üìÑ {doc.metadata['source']}:\n{doc.page_content[:300]}..." for doc in docs])

        return [
            Tool(
                name="ProgramSearch",
                func=program_search,
                description="–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã"
            )
        ]

    def _setup_agent(self):
        tools = self._setup_tools()

        prompt_template = """–¢—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã –ò–¢–ú–û. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. 
        –í–∞–∂–Ω–æ:  –æ—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ–±—É—á–µ–Ω–∏—é –≤ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞—Ö –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏/AI Product –≤ –ò–¢–ú–û.
    –í—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–≥–æ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Å—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:
    Question: –≤—Ö–æ–¥–Ω–æ–π –≤–æ–ø—Ä–æ—Å
    Thought: –∞–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    Action: –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (–æ–¥–∏–Ω –∏–∑ [{tools}]) –∏–ª–∏ "Final Answer"
    Action Input: –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
    Observation: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    ... (—ç—Ç–æ—Ç —Ü–∏–∫–ª –º–æ–∂–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑)
    Thought: –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    Final Answer: –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    –ü—Ä–∏–º–µ—Ä 1 (—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º):
    Question: –ö–∞–∫–∏–µ –∫—É—Ä—Å—ã –µ—Å—Ç—å –ø–æ –ò–ò?
    Thought: –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞—Ö –ø–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É
    Action: ProgramSearch
    Action Input: –∫—É—Ä—Å—ã –ø–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É
    Observation: üìÑ –ò–ò.txt: 1. –ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ 2. –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ...
    Thought: –ù–∞—à–µ–ª –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    Final Answer: –í–æ—Ç –∫—É—Ä—Å—ã –ø–æ –ò–ò: 1. –ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ 2. –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ...
    –ü—Ä–∏–º–µ—Ä 2 (–±–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞):
    Question: –ü—Ä–∏–≤–µ—Ç
    Thought: –≠—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é
    Final Answer: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?
    –¢–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥:
    {chat_history}
    Question: {input}
    {agent_scratchpad}"""
        prompt = PromptTemplate(
            template=prompt_template,
            input_variables=["input", "chat_history", "agent_scratchpad"],
            partial_variables={
                "tool_names": ", ".join([t.name for t in tools])
            }
        )

        agent = create_react_agent(
            llm=self.llm,
            tools=tools,
            prompt=prompt
        )
        return AgentExecutor(
            agent=agent,
            tools=tools,
            memory=ConversationBufferMemory(memory_key="chat_history"),
            verbose=True,
            max_iterations=3,
            handle_parsing_errors=True
        )


    def ask(self, query):
        try:
            result = self.agent.invoke({"input": query})
            return result["output"]
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {str(e)}"

if __name__ == "__main__":
    try:
        consultant = AdmissionConsultant()
        print("üéì –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã –ò–¢–ú–û –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        print("–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:")
        print("- –ö–∞–∫–∏–µ –∫—É—Ä—Å—ã –µ—Å—Ç—å –ø–æ –ò–ò?")
        print("- –ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—É?")
        print("- –†–∞—Å—Å–∫–∞–∂–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–º—É –∑—Ä–µ–Ω–∏—é")
        
        while True:
            query = input("\n‚ùì –í–∞—à –≤–æ–ø—Ä–æ—Å (–∏–ª–∏ '–≤—ã—Ö–æ–¥'): ").strip()
            if query.lower() in ('exit', '–≤—ã—Ö–æ–¥'):
                break
                
            response = consultant.ask(query)
            print(f"\nüí° –û—Ç–≤–µ—Ç: {response}")
            
    except Exception as e:
        print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")